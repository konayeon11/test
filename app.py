# -*- coding: utf-8 -*-
"""전이학습.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CYTj91HJscsjDuPMll05SqKdbtslsb8Z
"""

!pip install lightgbm

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import lightgbm as lgb
import matplotlib.pyplot as plt
import seaborn as sns

#import kagglehub

# Download latest version
#path = kagglehub.dataset_download("sulianova/cardiovascular-disease-dataset")

#print("Path to dataset files:", path)

import pandas as pd
import os

# 전체 경로 지정
#csv_path = os.path.join(path, "cardio_train.csv")

# 데이터 불러오기
#df = pd.read_csv(csv_path, sep=';')

df = pd.read_csv("cardio_train.csv", sep=';')

print(df.head())

"""# 전처리"""

#1. 결측치는 이미 없어서 생략
#2. 이상치 처리
#나이가 일수로 되어있어 년수로 바꿈
df['age'] = (df['age'] / 365).astype(int)
df['age']

#비현실적인 키/몸무게 제거
df = df[(df['height'] > 100) & (df['height'] < 250)]
df = df[(df['weight'] > 30) & (df['weight'] < 250)]

# BMI 파생 변수 추가
df['bmi'] = df['weight'] / ((df['height'] / 100) ** 2)

# 이상치 제거
df = df[(df["ap_hi"] >= 90) & (df["ap_hi"] <= 200)]
df = df[(df["ap_lo"] >= 60) & (df["ap_lo"] <= 130)]
df = df[(df["bmi"] >= 10) & (df["bmi"] <= 60)]

df["hypertension"] = ((df["ap_hi"] >= 140) | (df["ap_lo"] >= 90)).astype(int)

df

features = [
    "age", "gender", "height", "weight", "ap_hi", "ap_lo",
    "cholesterol", "gluc", "smoke", "alco", "active", "bmi", "hypertension"
]
X = df[features]
y = df["cardio"]

# 4. 전이학습 시뮬레이션: source vs target 분할(하나의 데이터를 가지고)
X_source, X_target, y_source, y_target = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# 5. 모델 학습 (LightGBM)
lgb_train = lgb.Dataset(X_source, label=y_source)
params = {
    "objective": "binary",
    "metric": "binary_logloss",
    "verbosity": -1
}
model = lgb.train(params, lgb_train, num_boost_round=100)

# 6. 성능 평가
y_pred = model.predict(X_target)
y_pred_class = (y_pred > 0.5).astype(int)

from sklearn.metrics import classification_report
print(classification_report(y_target, y_pred_class))

# 7. 중요 변수 시각화
lgb.plot_importance(model, max_num_features=10, importance_type='gain')
plt.title("Top Feature Importances")
plt.show()

def predict_risk(user_input: dict, model, feature_cols):
    # 입력값을 DataFrame으로 변환
    df = pd.DataFrame([user_input])

    # 파생 변수 추가
    df["bmi"] = df["weight"] / ((df["height"] / 100) ** 2)
    df["hypertension"] = ((df["ap_hi"] >= 140) | (df["ap_lo"] >= 90)).astype(int)

    # 누락된 feature 채우기 (기본값 0)
    for col in feature_cols:
        if col not in df.columns:
            df[col] = 0

    # feature 순서 맞추기
    df = df[feature_cols]

    # 예측
    prob = model.predict(df)[0]

    # feature importance 기반 상위 위험 요소 추출
    importances = model.feature_importance(importance_type='gain')
    feature_importance_dict = dict(zip(feature_cols, importances))

    sorted_importance = sorted(feature_importance_dict.items(), key=lambda x: x[1], reverse=True)

    top_features = {}
    for name, _ in sorted_importance[:5]:
        top_features[name] = df[name].values[0]

    return {
        "risk_probability": round(prob, 3),
        "top_risk_features": top_features
    }

# 사용자가 입력한 데이터 (예시)
user_example = {
    "age_years": 45,
    "gender": 2,
    "height": 160,
    "weight": 70,
    "ap_hi": 145,
    "ap_lo": 95,
    "cholesterol": 2,
    "gluc": 1,
    "smoke": 1,
    "alco": 0,
    "active": 0
}

result = predict_risk(user_example, model, feature_cols=features)

print(" 예측된 심혈관계 질환 위험도:", result["risk_probability"])
print(" 주요 위험 요인:")
for k, v in result["top_risk_features"].items():
    print(f"  - {k}: {v}")

"""# framingham 데이터에 전이"""

# 1. 데이터 경로 설정
import kagglehub
import os
import pandas as pd
import numpy as np

# framingham 데이터 다운로드
#framingham_path = kagglehub.dataset_download("aasheesh200/framingham-heart-study-dataset")
#print(" Framingham 파일 위치:", framingham_path)

# 데이터 다운로드
#path = kagglehub.dataset_download("sulianova/cardiovascular-disease-dataset")
#cardio_path = os.path.join(path, "cardio_train.csv")

# cardio 데이터 불러오기
#cardio_df = pd.read_csv(cardio_path, sep=';')
cardio_df = pd.read_csv("cardio_train.csv", sep=';')

# framingham 데이터 로드
#framingham_df = pd.read_csv(os.path.join(framingham_path, "framingham.csv"))
framingham_df = pd.read_csv("framingham.csv")

# cardio 전처리
cardio_df["age_years"] = (cardio_df["age"] / 365).astype(int)
cardio_df["bmi"] = cardio_df["weight"] / ((cardio_df["height"] / 100) ** 2)
cardio_df["hypertension"] = ((cardio_df["ap_hi"] >= 140) | (cardio_df["ap_lo"] >= 90)).astype(int)

# 이상치 제거
cardio_df = cardio_df[(cardio_df["ap_hi"] >= 90) & (cardio_df["ap_hi"] <= 200)]
cardio_df = cardio_df[(cardio_df["ap_lo"] >= 60) & (cardio_df["ap_lo"] <= 130)]
cardio_df = cardio_df[(cardio_df["bmi"] >= 10) & (cardio_df["bmi"] <= 60)]

# 타겟과 피처 설정
cardio_features = ["age_years", "gender", "ap_hi", "ap_lo", "bmi", "cholesterol", "gluc", "smoke", "alco", "active", "hypertension"]
X_cardio = cardio_df[cardio_features]
y_cardio = cardio_df["cardio"]

# 누락 제거
framingham_df = framingham_df.dropna()

# 컬럼명 통일 및 변환
framingham_df["age_years"] = framingham_df["age"]
framingham_df["gender"] = framingham_df["male"] + 1  # 1=여자, 2=남자로 변환
framingham_df["ap_hi"] = framingham_df["sysBP"]
framingham_df["ap_lo"] = framingham_df["diaBP"]
framingham_df["bmi"] = framingham_df["BMI"]

# 4. 'cholesterol' 범주화 함수
def cholesterol_category(total_chol):
    if total_chol < 200:
        return 1
    elif total_chol < 240:
        return 2
    else:
        return 3

framingham_df["cholesterol"] = framingham_df["totChol"].apply(cholesterol_category)

# 5. 'gluc' 범주화 함수
def glucose_category(glucose):
    if glucose < 100:
        return 1
    elif glucose < 126:
        return 2
    else:
        return 3

# 7. 'alco' 음주 여부: 'currentDrinker' 컬럼이 있으면 사용, 없으면 0 처리
if "currentDrinker" in framingham_df.columns:
    framingham_df["alco"] = framingham_df["currentDrinker"].astype(int)
else:
    framingham_df["alco"] = 0

# 8. 'active' 활동량: 'physicalActivity' 있으면 사용, 없으면 1로 기본값 지정
if "physicalActivity" in framingham_df.columns:
    framingham_df["active"] = framingham_df["physicalActivity"].apply(lambda x: 1 if x else 0)
else:
    framingham_df["active"] = 1

framingham_df["gluc"] = framingham_df["glucose"].apply(glucose_category)
framingham_df["smoke"] = framingham_df["currentSmoker"]

# 9. 고혈압 변수 정의
framingham_df["hypertension"] = ((framingham_df["ap_hi"] >= 140) | (framingham_df["ap_lo"] >= 90)).astype(int)

# 10. 타겟 변수 및 피처 세트 준비
framingham_df = framingham_df.dropna(subset=["TenYearCHD"])  # 타겟 결측 제거

framingham_df["hypertension"] = ((framingham_df["ap_hi"] >= 140) | (framingham_df["ap_lo"] >= 90)).astype(int)

# 타겟
y_fram = framingham_df["TenYearCHD"]
X_fram = framingham_df[cardio_features]

from sklearn.model_selection import train_test_split
import lightgbm as lgb
from sklearn.metrics import classification_report

# source 데이터 학습
train_data = lgb.Dataset(X_cardio, label=y_cardio)
params = {
    "objective": "binary",
    "metric": "binary_logloss",
    "verbosity": -1
}
model = lgb.train(params, train_data, num_boost_round=100)

# target 데이터로 예측
y_pred = model.predict(X_fram)
y_pred_label = (y_pred > 0.5).astype(int)

# 결과 평가
print(" Framingham 데이터셋에서 전이학습 성능:")
print(classification_report(y_fram, y_pred_label))

# 중요 피처 시각화
import matplotlib.pyplot as plt
lgb.plot_importance(model, max_num_features=10)
plt.title("Feature Importance (from cardio_train model)")
plt.show()

def predict_risk(model, user_input: dict):
    """
    model: LightGBM 학습 모델
    user_input: 사용자 입력 딕셔너리
      예) {
          "age_years": 55,
          "gender": 1,  # 남성=1, 여성=0
          "ap_hi": 130,
          "ap_lo": 85,
          "bmi": 24.5,
          "cholesterol": 2,  # 1=정상, 2=경계, 3=높음
          "gluc": 1,
          "smoke": 0,
          "alco": 0,
          "active": 1,
          "hypertension": 0
      }
    반환: 10년 심혈관질환 발병 확률 (0~1)
    """

    import pandas as pd

    # 모델 학습시 사용한 피처 순서에 맞춰 DataFrame 생성
    features = ["age_years", "gender", "ap_hi", "ap_lo", "bmi",
                "cholesterol", "gluc", "smoke", "alco", "active", "hypertension"]

    # 딕셔너리에서 해당 피처 값만 추출
    data = {feat: [user_input.get(feat, 0)] for feat in features}

    input_df = pd.DataFrame(data)

    # 모델 예측 (확률)
    risk_prob = model.predict(input_df)[0]  # 단일 샘플이라 인덱싱

    return risk_prob

#예시
user_input = {
    "age_years": 60,
    "gender": 1,
    "ap_hi": 140,
    "ap_lo": 90,
    "bmi": 27.5,
    "cholesterol": 3,
    "gluc": 2,
    "smoke": 1,
    "alco": 0,
    "active": 0,
    "hypertension": 1
}

risk = predict_risk(model, user_input)
print(f"예측된 10년 심혈관질환 위험도: {risk*100:.2f}%")

"""# GPT 연동 → 위험요인 기반 생활 처방 생성 함수"""

from openai import OpenAI
import openai

import os
from openai import OpenAI

api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

import os
os.environ["OPENAI_API_KEY"] = api_key

client = OpenAI()

openai.api_key = api_key

def generate_lifestyle_advice(risk_factors: dict):
    """
    risk_factors: 예) {"고혈압": True, "흡연": True, "당뇨": False, ...}
    GPT에게 생활 처방 요청

    반환: GPT가 생성한 생활 처방 텍스트
    """
    prompt = f"""
당신은 전문 심리상담가이자 임상영양사이며 심혈관 질환 예방 전문가입니다.
아래 환자의 위험 요인들을 바탕으로 친절하고 이해하기 쉽게 맞춤형 생활 처방을 작성해 주세요.

- 환자의 위험 요인: {risk_factors}
- 환자는 심리적으로 불안정한 상태임을 감안하여 위로와 동기부여 문구를 포함하세요.
- 생활 습관 개선을 위한 구체적인 단계별 실천 방법을 권고하고,
- 단순 나열이 아니라 '왜' 그런 행동이 중요한지도 간략히 설명해 주세요.
- 가능한 한 긍정적이고 희망적인 어조로 작성해 주세요.
- 마지막에 간단한 요약과 함께 작은 성공 경험을 쌓을 수 있는 제안도 포함하세요.
- 불필요하게 전문 용어를 쓰지 말고, 누구나 쉽게 이해할 수 있도록 작성하세요.
"""

    response = client.chat.completions.create(
      model="gpt-4o",
      messages=[{"role": "user", "content": prompt}],
      max_tokens=1000,
      temperature=0.7
    )
    advice = response.choices[0].message.content.strip()
    return advice

"""# Gradio"""

import gradio as gr

def predict_risk(model, user_input: dict):
    import pandas as pd
    features = ["age_years", "gender", "ap_hi", "ap_lo", "bmi",
                "cholesterol", "gluc", "smoke", "alco", "active", "hypertension"]
    data = {feat: [user_input.get(feat, 0)] for feat in features}
    input_df = pd.DataFrame(data)
    risk_prob = model.predict(input_df)[0]
    return risk_prob

def wrapper(age, gender, ap_hi, ap_lo, bmi, chol, gluc, smoke, alco, active):
    try:
        gender_num = 1 if gender == "남성" else 0
        chol_map = {"정상":1, "경계":2, "높음":3}
        gluc_map = {"정상":1, "경계":2, "높음":3}
        hypertension = 1 if (ap_hi >= 140 or ap_lo >= 90) else 0

        user_input = {
            "age_years": age,
            "gender": gender_num,
            "ap_hi": ap_hi,
            "ap_lo": ap_lo,
            "bmi": bmi,
            "cholesterol": chol_map[chol],
            "gluc": gluc_map[gluc],
            "smoke": int(smoke),
            "alco": int(alco),
            "active": int(active),
            "hypertension": hypertension
        }

        # 위험도 예측
        risk = predict_risk(model, user_input)
        risk_percent = round(risk * 100, 2)
        risk_msg = f"10년 내 심혈관질환 발병 위험도: **{risk_percent}%**\n"

        # 위험요인 추출
        risk_factors = {
            "고혈압": hypertension == 1,
            "흡연": smoke,
            "음주": alco,
            "비만": bmi >= 25,
            "고콜레스테롤": chol_map[chol] >= 2,
            "고혈당": gluc_map[gluc] >= 2,
            "운동 부족": not active,
        }

        # 위험도가 높을 경우에만 GPT 조언 생성
        if risk_percent >= 15:
            advice = generate_lifestyle_advice(risk_factors)
            return risk_msg + "\n\n맞춤형 생활처방:\n" + advice
        else:
            return risk_msg + "\n전반적으로 위험도가 낮습니다. 건강한 생활습관을 유지하세요!"

    except Exception as e:
        import traceback
        print("🔥 wrapper 함수에서 오류 발생:")
        traceback.print_exc()
        return f"⚠️ 내부 오류 발생: {e}"

# Gradio 인터페이스 정의
demo = gr.Interface(
    fn=wrapper,
    inputs=[
        gr.Slider(20, 90, value=50, label="나이"),
        gr.Radio(["남성", "여성"], label="성별"),
        gr.Number(label="수축기 혈압 (ap_hi)", value=120),
        gr.Number(label="이완기 혈압 (ap_lo)", value=80),
        gr.Number(label="BMI", value=22.0),
        gr.Radio(["정상", "경계", "높음"], label="콜레스테롤 수준"),
        gr.Radio(["정상", "경계", "높음"], label="혈당 수준"),
        gr.Checkbox(label="흡연 여부"),
        gr.Checkbox(label="음주 여부"),
        gr.Checkbox(label="활동적 여부")
    ],
    outputs="text",
    title="심혈관질환 10년 예측기 (Gradio 버전)"
)

demo.launch()

"""# streamlit + cloudflared"""

!pip install streamlit

!wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
!chmod +x cloudflared

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# # streamlit_app.py
# 
# import streamlit as st
# import pandas as pd
# import lightgbm as lgb
# import matplotlib.pyplot as plt
# 
# # 💡 GPT 기반 조언 함수
# from openai import OpenAI
# 
# # OpenAI 클라이언트 생성 (환경변수 OPENAI_API_KEY로 키 설정 권장)
# client = OpenAI(api_key=api_key)
# 
# def generate_lifestyle_advice(risk_factors: dict):
#     import json
#     risk_factors_str = json.dumps(risk_factors, ensure_ascii=False)
#     prompt = f"""
# # 역할 (Role)
# 당신은 심혈관질환 예방과 관리를 전문으로 하는 의료 전문가입니다.
# 최신 연구와 임상 지침에 기반하여 일반인의 건강 행동을 효과적으로 변화시킬 수 있도록 돕는 역할을 맡고 있습니다.
# 
# # 대상 (Audience)
# 당신의 조언을 받을 대상은 건강에 관심이 높지만 의료 지식은 많지 않은 40~60대 일반 환자입니다.
# 이 환자는 최근 심혈관 위험 평가를 받았으며, 자신의 상태에 맞는 생활 습관 개선 방안을 찾고자 합니다.
# 
# # 입력 정보 (Input)
# 다음은 이 환자의 심혈관질환 관련 주요 위험 요인입니다:
# {risk_factors}
# 
# # 작업 목표 (Task)
# 다음 항목을 포함하여, 환자 맞춤형 건강 처방을 제공하세요:
# 
# 1. **각 위험 요인이 심혈관질환 발병에 어떤 영향을 주는지 설명**
#    - 단순히 "위험하다"가 아니라, 왜 그런지 병태생리적으로 1~2문장 내외로 설명
#    - 가능한 경우 숫자 (예: 혈압 140 이상이면 위험이 2배 증가) 활용
# 
# 2. **각 위험 요인을 줄이기 위한 구체적인 실천 방안 제시**
#    - 매일 걷기, 염분 줄이기 등 일상에서 쉽게 실천 가능한 행동으로
#    - 각 행동이 해당 위험 요인을 어떻게 개선하는지도 간단히 설명
# 
# 3. **개인화된 실천 팁 또는 격려 메시지 삽입**
#    - 예: "50대 이후에는 혈압 관리가 특히 중요합니다."
#    - 대상자의 나이, 성별, 위험 조합 등을 고려한 맞춤 코멘트
# 
# 4. **필요 시 의료적 조치나 전문의 상담 권고 포함**
#    - 특정 수치(혈압, 혈당 등)가 기준치를 넘는 경우 병원 진료를 권고
#    - 약물 치료, 혈액 검사 등 실제적 조치도 언급 가능
# 
# 5. **신뢰할 수 있는 참고 자료 2~3개 추천**
#    - 유튜브 영상: 제목, 설명, 링크
#    - 건강 저널: 논문 제목, 핵심 내용, 링크
#    - 공공기관 건강 정보 사이트 등
# 
# 6. **생활습관 변화 유지를 위한 '작은 성공 경험' 제안**
#    - 행동을 습관화하기 위한 구체적이고 측정 가능한 예시 포함
#    - 예: "매일 아침 혈압 측정하고 기록하기", "주 3회 친구와 걷기 챌린지 참여"
# 
# # 형식 및 톤 (Format & Tone)
# - 각 위험 요인은 번호나 소제목으로 구분하여 명확하게 구성
# - 중요한 실천 포인트는 굵은 글씨로 강조
# - 설명은 전문성을 담되, 반드시 쉽게 이해할 수 있도록 쓰세요
# - 필요 시 간단한 의료 용어는 ()나 예시로 풀어 설명
# - 전체 어조는 친절하면서도 신뢰감 있는 의료 전문가 톤 유지
# 
# """
#     response = client.chat.completions.create(
#         model="gpt-4o",
#         messages=[{"role": "user", "content": prompt}],
#         max_tokens=1000,
#         temperature=0.7
#     )
#     return response.choices[0].message.content.strip()
# 
# 
# # ✅ 위험 예측 함수
# def predict_risk(model, user_input: dict):
#     features = ["age_years", "gender", "ap_hi", "ap_lo", "bmi",
#                 "cholesterol", "gluc", "smoke", "alco", "active", "hypertension"]
#     data = {feat: [user_input.get(feat, 0)] for feat in features}
#     input_df = pd.DataFrame(data)
#     risk_prob = model.predict(input_df)[0]
#     return risk_prob
# 
# # ✅ 모델 불러오기 (학습된 모델을 사용하거나 임시로 다시 학습)
# @st.cache_resource
# def load_model():
#     from sklearn.datasets import make_classification
#     import lightgbm as lgb
# 
#     # 가짜 데이터로 모델 구성 (실제 코드에선 학습된 모델 불러오세요)
#     X, y = make_classification(n_samples=1000, n_features=11)
#     lgb_train = lgb.Dataset(X, label=y)
#     params = {"objective": "binary", "metric": "binary_logloss", "verbosity": -1}
#     model = lgb.train(params, lgb_train, num_boost_round=10)
#     return model
# 
# model = load_model()
# 
# # ✅ Streamlit 페이지 구성
# st.set_page_config(page_title="심혈관질환 예측기", layout="centered")
# 
# st.title("🫀 심혈관질환 10년 위험도 예측기")
# st.markdown("건강 정보를 입력하면 10년 내 심혈관질환 위험을 예측하고, 필요 시 GPT 기반 **맞춤형 건강 조언**을 제공합니다.")
# 
# st.header("📋 건강 정보 입력")
# 
# # 👉 사용자 입력
# age = st.slider("나이", 20, 90, 50)
# gender = st.radio("성별", ["남성", "여성"])
# ap_hi = st.number_input("수축기 혈압 (ap_hi)", value=120)
# ap_lo = st.number_input("이완기 혈압 (ap_lo)", value=80)
# 
# height_cm = st.number_input("키 (cm)", value=170)
# weight_kg = st.number_input("몸무게 (kg)", value=65)
# 
# chol = st.radio("콜레스테롤 수치", ["정상", "경계", "높음"])
# gluc = st.radio("혈당 수치", ["정상", "경계", "높음"])
# smoke = st.checkbox("흡연")
# alco = st.checkbox("음주")
# active = st.checkbox("활동적 생활")
# 
# # 👉 BMI 계산
# if height_cm > 0:
#     height_m = height_cm / 100
#     bmi = weight_kg / (height_m ** 2)
# else:
#     bmi = 0
# 
# # 👉 입력 변환
# gender_num = 1 if gender == "남성" else 0
# chol_map = {"정상": 1, "경계": 2, "높음": 3}
# gluc_map = {"정상": 1, "경계": 2, "높음": 3}
# hypertension = 1 if (ap_hi >= 140 or ap_lo >= 90) else 0
# 
# user_input = {
#     "age_years": age,
#     "gender": gender_num,
#     "ap_hi": ap_hi,
#     "ap_lo": ap_lo,
#     "bmi": bmi,
#     "cholesterol": chol_map[chol],
#     "gluc": gluc_map[gluc],
#     "smoke": int(smoke),
#     "alco": int(alco),
#     "active": int(active),
#     "hypertension": hypertension
# }
# 
# if st.button("🔍 위험도 예측"):
#     risk = predict_risk(model, user_input)
#     risk_percent = round(risk * 100, 2)
#     st.subheader(f"📈 예측 결과: {risk_percent}%")
# 
#     risk_factors = {
#         "고혈압": hypertension == 1,
#         "흡연": smoke,
#         "음주": alco,
#         "비만": bmi >= 25,
#         "고콜레스테롤": chol_map[chol] >= 2,
#         "고혈당": gluc_map[gluc] >= 2,
#         "운동 부족": not active,
#     }
# 
#     if risk_percent >= 15:
#         st.warning("⚠️ 위험도가 높습니다. 건강 관리가 필요합니다.")
#         st.markdown("💡 **GPT 기반 맞춤형 생활 조언**")
#         with st.spinner("GPT에게 조언을 요청 중..."):
#             advice = generate_lifestyle_advice(risk_factors)
#             st.success("생활 처방이 도착했습니다:")
#             st.markdown(advice)
#     else:
#         st.success("🎉 전반적으로 위험도가 낮습니다! 지금처럼 건강을 잘 유지하세요.")
# 
# st.markdown("---")
# st.caption("🧠 Powered by LightGBM + GPT-4o | Made with ❤️ using Streamlit")

!wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
!chmod +x cloudflared

!streamlit run app.py --server.address 0.0.0.0 &>/dev/null &

!nohup ./cloudflared tunnel --url http://localhost:8501 &> tunnel.log &

!grep "trycloudflare.com" tunnel.log