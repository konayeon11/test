# -*- coding: utf-8 -*-
# app_gpt.py

import streamlit as st
import pandas as pd
import lightgbm as lgb
import os
import json
import requests

# ==============================
# ✅ Hugging Face Inference API 설정
# ==============================
HF_API_KEY = st.secrets.get("huggingface", {}).get("api_key", "")
if not HF_API_KEY:
    st.error("❌ Hugging Face API 키가 설정되어 있지 않습니다. Streamlit Secrets에 'huggingface.api_key'를 등록해주세요.")
    st.stop()

# Nemotron 49B (BF16) — Inference API 엔드포인트
HF_API_URL = "https://api-inference.huggingface.co/models/nvidia/Llama-3.3-Nemotron-Super-49B-v1.5"
HF_HEADERS = {"Authorization": f"Bearer {HF_API_KEY}"}

# ==============================
# ✅ Nemotron 기반 조언 함수 (Hugging Face 사용)
# ==============================
def generate_lifestyle_advice(risk_factors: dict) -> str:
    """
    Hugging Face Inference API를 통해 NVIDIA Llama-3.3-Nemotron-Super-49B-v1.5 모델로
    한국어 건강 조언을 생성합니다.
    """
    risk_factors_str = json.dumps(risk_factors, ensure_ascii=False)

    # 단일 프롬프트(지시 + 입력). Chat 형식이 아니라도 충분히 잘 동작하도록 구성.
    prompt = f"""
다음 역할과 지침에 따라 한국어로만 답변하세요.

[역할]
- 당신은 심혈관질환 예방 및 관리에 전문성을 가진 임상의입니다.

[대상]
- 40~60대 일반 환자이며, 최근 심혈관 위험 평가를 받았고 생활습관 처방을 원합니다.

[입력 정보]
- 환자의 주요 위험 요인(JSON): {risk_factors_str}

[작업 목표]
1) 각 위험 요인이 심혈관질환에 미치는 영향(병태생리/수치 포함, 1~2문장)
2) 위험 요인별 구체적 실천 방안(일상 행동 중심, 효과 설명 포함)
3) 개인화된 실천 팁/격려 메시지(나이/위험 조합 고려)
4) 진료/검사/약물 등 의료적 조치 권고(기준치 초과 시)
5) 신뢰할 수 있는 참고 자료 2~3개(제목/요약/링크: 유튜브·학술·공공기관 혼합)
6) '작은 성공 경험' 제안(측정 가능·구체적)

[형식]
- 번호/소제목으로 구분, 핵심 실천 포인트는 **굵게**
- 친절하고 신뢰감 있는 의료 전문가 톤
- 불필요한 서론 없이 바로 처방부터 제시
- 한국어 100%

이제 위 형식대로 결과를 출력하세요.
""".strip()

    try:
        resp = requests.post(
            HF_API_URL,
            headers=HF_HEADERS,
            json={
                "inputs": prompt,
                "parameters": {
                    "max_new_tokens": 500,
                    "temperature": 0.7,
                    "repetition_penalty": 1.05,
                }
            },
            timeout=120
        )
        resp.raise_for_status()
        data = resp.json()

        # 응답 형태 방어적 처리
        # 보통: [{'generated_text': '...'}]
        if isinstance(data, list) and len(data) > 0 and isinstance(data[0], dict):
            if "generated_text" in data[0]:
                return data[0]["generated_text"].strip()
            # 일부 엔드포인트는 'summary_text' 등 다른 키를 쓰기도 함
            for k in ("summary_text", "text", "response"):
                if k in data[0]:
                    return str(data[0][k]).strip()

        # dict 에러(모델 로딩중 등) 메시지 처리
        if isinstance(data, dict) and "error" in data:
            return f"⚠️ 모델 응답 대기 또는 오류: {data.get('error')}"

        return f"⚠️ 예상치 못한 응답 형식: {data}"
    except Exception as e:
        return f"❌ Hugging Face 호출 실패: {str(e)}"


# ==============================
# ✅ 데모용 LightGBM 모델 (캐시)
# ==============================
@st.cache_resource
def load_model():
    from sklearn.datasets import make_classification
    X, y = make_classification(n_samples=1000, n_features=11, random_state=42)
    lgb_train = lgb.Dataset(X, label=y)
    params = {"objective": "binary", "metric": "binary_logloss", "verbosity": -1}
    model = lgb.train(params, lgb_train, num_boost_round=10)
    return model

model = load_model()

# ==============================
# 🔢 보조 함수: 범주화
# ==============================
def classify_cholesterol(chol_value):
    if chol_value < 200:
        return 1
    elif 200 <= chol_value < 240:
        return 2
    else:
        return 3

def classify_gluc(gluc_value):
    if gluc_value < 100:
        return 1
    elif 100 <= gluc_value < 126:
        return 2
    else:
        return 3

# ==============================
# 🖥️ Streamlit UI
# ==============================
st.set_page_config(page_title="심혈관질환 예측기", layout="centered")
st.title("🩺 심혈관질환 10년 위험도 예측기")
st.markdown("건강 정보를 입력하면 10년 내 심혈관질환 위험을 예측하고, 필요 시 **Nemotron 49B 기반** 맞춤형 건강 조언을 제공합니다.")

st.header("📋 건강 정보 입력")
age = st.slider("나이", 20, 90, 50)
gender = st.radio("성별", ["남성", "여성"])
ap_hi = st.number_input("수축기 혈압", value=120)
ap_lo = st.number_input("이완기 혈압", value=80)
height_cm = st.number_input("키(cm)", value=170)
weight_kg = st.number_input("몸무게(kg)", value=65)
chol = st.number_input("콜레스테롤 수치 (mg/dL)", min_value=100, max_value=400, value=180)
gluc = st.number_input("혈당 수치 (공복 mg/dL)", min_value=50, max_value=300, value=90)
smoke = st.checkbox("흡연")
alco = st.checkbox("음주")
active = st.checkbox("활동적 생활")

# 입력 처리
bmi = weight_kg / ((height_cm / 100) ** 2) if height_cm else 0
gender_num = 1 if gender == "남성" else 0
chol_cat = classify_cholesterol(chol)
gluc_cat = classify_gluc(gluc)
hypertension = int(ap_hi >= 140 or ap_lo >= 90)

user_input = {
    "age_years": age,
    "gender": gender_num,
    "ap_hi": ap_hi,
    "ap_lo": ap_lo,
    "bmi": bmi,
    "cholesterol": chol_cat,
    "gluc": gluc_cat,
    "smoke": int(smoke),
    "alco": int(alco),
    "active": int(active),
    "hypertension": hypertension
}

# 예측 함수
def predict_risk(model, user_input: dict):
    features = ["age_years", "gender", "ap_hi", "ap_lo", "bmi",
                "cholesterol", "gluc", "smoke", "alco", "active", "hypertension"]
    df = pd.DataFrame([user_input])[features]
    return float(model.predict(df)[0])

# 버튼 동작
if st.button("🔍 위험도 예측"):
    risk = predict_risk(model, user_input)
    risk_percent = round(risk * 100, 2)
    st.subheader(f"📈 예측 결과: {risk_percent}%")

    risk_factors = {
        "고혈압": hypertension == 1,
        "흡연": smoke,
        "음주": alco,
        "비만": bmi >= 25,
        "고콜레스테롤": chol_cat >= 2,
        "고혈당": gluc_cat >= 2,
        "운동 부족": not active,
    }

    if risk_percent >= 15:
        st.warning("⚠️ 심혈관계 위험이 높은 편입니다. 생활습관 개선이 필요합니다.")
        st.markdown("💡 **Nemotron 49B 기반 맞춤형 건강 처방**")
        with st.spinner("모델이 건강 조언을 생성 중입니다..."):
            advice = generate_lifestyle_advice(risk_factors)
            st.success("생활 처방 도착 ✅")
            st.markdown(advice)
    else:
        st.success("🎉 전반적으로 위험도가 낮습니다! 지금처럼 건강을 잘 유지하세요.")

st.markdown("---")
st.caption("🧠 Powered by LightGBM + NVIDIA Llama-3.3 Nemotron 49B | Made with ❤️ using Streamlit")
